import { List, Map, Record } from "immutable"
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { fetchCount } from "./counterAPI"

type OldState = {
  value: number
  state: "idle" | "loading" | "failed"
  // adding a "list" here will throw TS errors
  list: List<number>
}

class ImmutableInnerState extends Record<OldState>({
  value: 0,
  state: "idle",
  list: List<number>(),
}) {}

export interface CounterState {
  immutable: ImmutableInnerState
}

const initialState: CounterState = {
  immutable: new ImmutableInnerState(),
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.immutable = state.immutable
        .update("value", (value) => value + 1)
        .update("list", (l) => l.push(l.size + 1))
    },
    decrement: (state) => {
      state.immutable = state.immutable.set(
        "value",
        state.immutable.get("value") - 1,
      )
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.immutable = state.immutable.update(
        "value",
        (value) => value + action.payload,
      )
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.immutable = state.immutable.set("state", "loading")
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.immutable = state.immutable
          .set("state", "idle")
          .update("value", (prev) => prev + action.payload)
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.immutable = state.immutable.set("state", "failed")
      })
  },
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) =>
  state.counter.immutable.get("list").size

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }

export default counterSlice.reducer
